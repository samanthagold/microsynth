# get new devtools package
devtools::install_github("hadley/devtools")
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("aggregating variables over time")
# devtools::use_vignette("ensuring model feasibility")
# get packages to clean up code in R/
install.packages("formatR") # autofix
install.packages("lintr") # searches for more things
# If you did not already do this with RStudio.
# usethis::create_package("microsynth")
# description -------------------------------------------------------------
library(usethis)
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
Version="2.0.31",
VignetteBuilder='knitr'))
# description -------------------------------------------------------------
library(usethis)
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
Version="2.0.31",
VignetteBuilder='knitr'))
# Dependencies ------------------------------------------------------------
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to intall XLSX/rJava
install.packages('xlsx')
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS", "Suggests")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("pracma")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
usethis::use_package("rmarkdown", "Suggests") # this won't force users to install.
# requireNamespace("xlsx", quietly = TRUE)
# requireNamespace("pracma", quietly = TRUE)
# use_package("rmr", "Suggests") # this won't force users to install.
install.packages("xlsx")
# Add Dataset -------------------------------------------------------------
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
seattledmi <- as.data.frame(seattledmi)
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
# check compression method/size for data files. should be under 1 MB
# Checking Package Docs and Health -----------------------------------------
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/microsynth/data/seattledmi.rda")
# import the DMI data (csv) and make to an RData
getwd()
# import the DMI data (csv) and make to an RData
seattledmi <- load("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/microsynth/data/seattledmi.rda")
# import the DMI data (csv) and make to an RData
seattledmi <- load("data/seattledmi.rda")
# Add Dataset -------------------------------------------------------------
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- load("data/seattledmi.rda")
#seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
seattledmi <- as.data.frame(seattledmi)
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
# check compression method/size for data files. should be under 1 MB
# import the DMI data (csv) and make to an RData
seattledmi <- load("data/seattledmi.rda")
# import the DMI data (csv) and make to an RData
load("data/seattledmi.rda")
# import the DMI data (csv) and make to an RData
load("data/seattledmi.rda")
# import the DMI data (csv) and make to an RData
getwd()
seattledmi <- read_csv("../data/seattledmi.csv")
seattledmi <- read_csv("../seattledmi.csv")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("../seattledmi.csv")
#seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
seattledmi <- as.data.frame(seattledmi)
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
# check compression method/size for data files. should be under 1 MB
formatR::tidy_dir("R")
devtools::document() # build docs
devtools::check()
devtools::release()
spell_check()
spell_check()
spell_check()
devtools::check()
spell_check()
devtools::release()
devtools::release()
check_rhub()
check_win_devel()
devtools::release()
devtools::release()
# Release Package ---------------------------------------------------------
devtools::build(vignettes=T)
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
# check RStudio version
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149") # Check you have the most recent RStudio.
# check RStudio version
install.packages("rstudioapi")
install.packages("rstudioapi")
# rstudioapi::isAvailable("0.99.149") # Check you have the most recent RStudio.
# get new devtools package
devtools::install_github("hadley/devtools")
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("aggregating variables over time")
# devtools::use_vignette("ensuring model feasibility")
# get packages to clean up code in R/
install.packages("formatR") # autofix
install.packages("lintr") # searches for more things
# description -------------------------------------------------------------
library(usethis)
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
Version="2.0.31",
VignetteBuilder='knitr'))
# Dependencies ------------------------------------------------------------
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to install XLSX/rJava
install.packages('xlsx')
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
# usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS", "Suggests")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("pracma")
# usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS", "Suggests")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("pracma")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
usethis::use_package("rmarkdown", "Suggests") # this won't force users to install.
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("../seattledmi.csv")
#seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
seattledmi <- as.data.frame(seattledmi)
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
formatR::tidy_dir("R")
devtools::document() # build docs
devtools::check()
usethis::use_package("LowRankQP", "Suggests")
usethis::use_package("LowRankQP", "Suggests")
warnings()
devtools::document() # build docs
devtools::check()
?is
if (is(w) == "microsynth") {
w <- w$w
}
devtools::check()
usethis::use_package("methods")
# description -------------------------------------------------------------
library(usethis)
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
Version="2.0.31",
VignetteBuilder='knitr'))
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
# check RStudio version
install.packages("rstudioapi")
install.packages("rstudioapi")
# rstudioapi::isAvailable("0.99.149") # Check you have the most recent RStudio.
# get new devtools package
devtools::install_github("hadley/devtools")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("aggregating variables over time")
# devtools::use_vignette("ensuring model feasibility")
# get packages to clean up code in R/
install.packages("formatR") # autofix
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("aggregating variables over time")
# devtools::use_vignette("ensuring model feasibility")
# get packages to clean up code in R/
install.packages("formatR") # autofix
install.packages("formatR")
install.packages("lintr") # searches for more things
# If you did not already do this with RStudio.
usethis::create_package("microsynth")
getwd()
setwd("~/Google Drive/Professional Projects/Synthetic Controls")
getwd()
# If you did not already do this with RStudio.
usethis::create_package("microsynth")
# Dependencies ------------------------------------------------------------
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to install XLSX/rJava
install.packages('xlsx')
# usethis::use_package("boot")
usethis::use_package("survey")
getwd()
setwd("~/Google Drive/Professional Projects/Synthetic Controls/microsynth")
# usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP", "Suggests")
# usethis::use_package("nleqslv")
usethis::use_package("MASS", "Suggests")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("pracma")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
usethis::use_package("rmarkdown", "Suggests") # this won't force users to install.
usethis::use_package("methods")
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("../seattledmi.csv")
#seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
seattledmi <- as.data.frame(seattledmi)
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
formatR::tidy_dir("R")
devtools::document() # build docs
devtools::check()
devtools::release()
devtools::release()
spell_check()
devtools::spell_check()
devtools::release()
check_rhub()
devtools::check_rhub()
Sys.setenv("_R_CHECK_FORCE_SUGGESTS_", FALSE)
?Sys.setenv
Sys.setenv(_R_CHECK_FORCE_SUGGESTS_ = FALSE)
Sys.setenv(_R_CHECK_FORCE_SUGGESTS_ = FALSE)
Sys.setenv("_R_CHECK_FORCE_SUGGESTS_"= FALSE)
devtools::check_rhub()
Sys.getenv()
devtools::install_github('LowRankQP')
remotes::install_github("cran/LowRankQP")
remotes::install_github("cran/LowRankQP")
remotes::install_github("coatless-mac/macrtools")
macrtools::macos_rtools_install()
pwpw
remotes::install_github("coatless-mac/macrtools")
remotes::install_github("cran/LowRankQP")
library(LowRankQP)
devtools::check()
devtools::check_rhub()
library(LowRankQP)
devtools::release()
devtools::release()
devtools::check_win_devel()
# description -------------------------------------------------------------
library(usethis)
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
Version="2.0.40",
VignetteBuilder='knitr'))
devtools::document() # build docs
devtools::check()
# Add Dataset -------------------------------------------------------------
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("../seattledmi.csv")
#seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
seattledmi <- as.data.frame(seattledmi)
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
# check compression method/size for data files. should be under 1 MB
# Checking Package Docs and Health -----------------------------------------
formatR::tidy_dir("R")
devtools::document() # build docs
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to install XLSX/rJava
install.packages('xlsx')
# usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP", "Suggests")
# usethis::use_package("nleqslv")
usethis::use_package("MASS", "Suggests")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("pracma")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
# usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP", "Suggests")
# usethis::use_package("nleqslv")
usethis::use_package("MASS", "Suggests")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("pracma")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
usethis::use_package("rmarkdown", "Suggests") # this won't force users to install.
usethis::use_package("methods")
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("../seattledmi.csv")
#seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
seattledmi <- as.data.frame(seattledmi)
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
# check compression method/size for data files. should be under 1 MB
# Checking Package Docs and Health -----------------------------------------
formatR::tidy_dir("R")
devtools::document() # build docs
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
devtools::check_win_devel()
#' characteristics of the treatment to the synthetic control and the
#' population; and 2) estimated results, in a similar format as they
#' appear when saved to .csv or .xlsx., once for each specified
#' post-intervention evaluation time.
#'
#' @param object A \code{microsynth} object produced by \code{microsynth()}
#' @param ... further arguments passed to or from other methods.
#'
#' @@method print microsynth
#' @export
summary.microsynth <- function(object, ...) {
cat("Weight Balance Table: \n\n")
print(object$w$Summary, ...)
# Be careful about case when $Results does not exist.
if (!is.null(object$Results)) {
cat("\nResults: \n")
print.res(object$Results)
}
}
devtools::document() # build docs
devtools::check()
devtools::check_win_devel()
devtools::check_rhub()
remotes::install_github("cran/LowRankQP")
?devtools::check_win_devel()
devtools::check_win_devel('_R_CHECK_FORCE_SUGGESTS_'= FALSE)
devtools::check_win_devel(args=c('_R_CHECK_FORCE_SUGGESTS_'= FALSE))
devtools::check_win_devel(args=c('_R_CHECK_FORCE_SUGGESTS_'= FALSE))
devtools::check_rhub(args=c('_R_CHECK_FORCE_SUGGESTS_'= FALSE)) #
# devtools::check_rhub(args=c('_R_CHECK_FORCE_SUGGESTS_'= FALSE)) #
devtools::check_win_devel(args=c(_R_CHECK_FORCE_SUGGESTS_= FALSE)) #
devtools::check_rhub(build_args=c('_R_CHECK_FORCE_SUGGESTS_'= FALSE)) #
devtools::check_rhub(build_args=c(_R_CHECK_FORCE_SUGGESTS_= FALSE)) #
devtools::check_rhub(build_args=c(_R_CHECK_FORCE_SUGGESTS_= FALSE)) #
?check_win_devel
?build
devtools::check_rhub(env_vars=('_R_CHECK_FORCE_SUGGESTS_'= FALSE)) #
devtools::check_rhub(env_vars=(_R_CHECK_FORCE_SUGGESTS_= FALSE)) #
devtools::check_rhub(env_vars=(`_R_CHECK_FORCE_SUGGESTS_`= FALSE)) #
check_rhub
?devtools::check_rhub
devtools::check_rhub(env_vars=c(`_R_CHECK_FORCE_SUGGESTS_`= 'false')) #
devtools::check_win_devel()
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
# make package
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(xlsx)
library(xlsx)
library(readr)
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
library(xlsx)
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
system ("java -version")
library(rJava())
library(rJava)
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library(rJava)
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library(rJava)
library(rJava)
system ("java -version")
git pull
devtools::release()
devtools::check()
